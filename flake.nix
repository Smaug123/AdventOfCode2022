{
  description = "Advent of Code 2022";

  inputs = {
    flake-utils.url = "github:numtide/flake-utils";
    nixpkgs.url = "nixpkgs/nixpkgs-unstable";
    alejandra.url = "github:kamadorueda/alejandra/3.0.0";
    alejandra.inputs.nixpkgs.follows = "nixpkgs";
  };

  outputs = {
    self,
    nixpkgs,
    alejandra,
    flake-utils,
    ...
  }:
    flake-utils.lib.eachDefaultSystem (system: let
      pkgs = nixpkgs.legacyPackages.${system};
      projectFile = "./AdventOfCode2022.App/AdventOfCode2022.App.fsproj";
      testProjectFile = "./AdventOfCode2022.Test/AdventOfCode2022.Test.fsproj";
      pname = "AdventOfCode2022";
      outputFiles = [""];
      arrayToShell = a: toString (map (pkgs.lib.escape (pkgs.lib.stringToCharacters "\\ ';$`()|<>\t")) a);
      dotnet-sdk = pkgs.dotnet-sdk_7;
    in {
      packages = {
        fetchDeps =
              let
                flags = [];
                runtimeIds = map (system: pkgs.dotnetCorePackages.systemToDotnetRid system) dotnet-sdk.meta.platforms;
              in
              pkgs.writeShellScript "fetch-${pname}-deps" ''
                set -euo pipefail
                export PATH="${pkgs.lib.makeBinPath [ pkgs.coreutils dotnet-sdk (pkgs.nuget-to-nix.override { inherit dotnet-sdk; }) ]}"
                for arg in "$@"; do
                    case "$arg" in
                        --keep-sources|-k)
                            keepSources=1
                            shift
                            ;;
                        --help|-h)
                            echo "usage: $0 [--keep-sources] [--help] <output path>"
                            echo "    <output path>   The path to write the lockfile to. A temporary file is used if this is not set"
                            echo "    --keep-sources  Dont remove temporary directories upon exit, useful for debugging"
                            echo "    --help          Show this help message"
                            exit
                            ;;
                    esac
                done
                export tmp=$(mktemp -td "${pname}-tmp-XXXXXX")
                HOME=$tmp/home
                exitTrap() {
                    test -n "''${ranTrap-}" && return
                    ranTrap=1
                    if test -n "''${keepSources-}"; then
                        echo -e "Path to the source: $tmp/src\nPath to the fake home: $tmp/home"
                    else
                        rm -rf "$tmp"
                    fi
                    # Since mktemp is used this will be empty if the script didnt succesfully complete
                    if ! test -s "$depsFile"; then
                      rm -rf "$depsFile"
                    fi
                }
                trap exitTrap EXIT INT TERM
                dotnetRestore() {
                    local -r project="''${1-}"
                    local -r rid="$2"
                    dotnet restore ''${project-} \
                        -p:ContinuousIntegrationBuild=true \
                        -p:Deterministic=true \
                        --packages "$tmp/nuget_pkgs" \
                        --runtime "$rid" \
                        --no-cache \
                        --force
                }
                declare -a projectFiles=( ${toString (pkgs.lib.toList projectFile)} )
                declare -a testProjectFiles=( ${toString (pkgs.lib.toList testProjectFile)} )
                export DOTNET_NOLOGO=1
                export DOTNET_CLI_TELEMETRY_OPTOUT=1
                depsFile=$(realpath "''${1:-$(mktemp -t "${pname}-deps-XXXXXX.nix")}")
                mkdir -p "$tmp/nuget_pkgs"
                storeSrc="${./.}"
                src=$tmp/src
                cp -rT "$storeSrc" "$src"
                chmod -R +w "$src"
                cd "$src"
                echo "Restoring project..."
                for rid in "${pkgs.lib.concatStringsSep "\" \"" runtimeIds}"; do
                    (( ''${#projectFiles[@]} == 0 )) && dotnetRestore "" "$rid"
                    for project in ''${projectFiles[@]-} ''${testProjectFiles[@]-}; do
                        dotnetRestore "$project" "$rid"
                    done
                done
                echo "Succesfully restored project"
                echo "Writing lockfile..."
                echo -e "# This file was automatically generated by passthru.fetch-deps.\n# Please dont edit it manually, your changes might get overwritten!\n" > "$depsFile"
                nuget-to-nix "$tmp/nuget_pkgs" "${dotnet-sdk.packages}" >> "$depsFile"
                echo "Succesfully wrote lockfile to $depsFile"
              '';
        default = pkgs.buildDotnetModule {
          pname = pname;
          version = "0.0.1";
          src = ./.;
          projectFile = projectFile;
          nugetDeps = ./deps.nix;
          doCheck = true;
          dotnet-sdk = pkgs.dotnet-sdk_7;
          dotnet-runtime = pkgs.dotnetCorePackages.runtime_7_0;
        };
      };
      devShell = pkgs.mkShell {
        buildInputs = with pkgs; [
          (with dotnetCorePackages;
            combinePackages [
              dotnet-sdk_7
              dotnetPackages.Nuget
            ])
        ];
        packages = [
          alejandra.defaultPackage.${system}
        ];
      };
    });
}
